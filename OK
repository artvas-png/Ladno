#include <iostream>
#include <vector>
#include <queue>



class Node{
public:
    int value;
    Node *left;
    Node *right;
};
class Tree{
private:
    Node* root;
    void insert(const int &value_, Node* leaf) {
        if (leaf->value > value_) {
            if (leaf->left != NULL) {
                insert(value_, leaf->left);
            } else {
                leaf->left = new Node;
                leaf->left->left = NULL;
                leaf->left->right = NULL;
                leaf->left->value = value_;
            }
        } else {
            if (leaf->right != NULL) {
                insert(value_, leaf->right);
            } else {
                leaf->right = new Node;
                leaf->right->right = NULL;
                leaf->right->left = NULL;
                leaf->right->value = value_;
            }
        }
    }

public:
    Tree(){
        root=NULL;
    }
    void insert_(const int &value_){
        if(root!=NULL) {
            insert(value_, root);
        }
        else{
            root=new Node;
            root->value=value_;
            root->left=NULL;
            root->right=NULL;
        }
    }
    Node* get_root()const{
        return root;
    }


};


int main() {
    Tree tree;
    while (std::cin) {
        int x;
        std::cin >> x;
        tree.insert_(x);
        if(std::cin.peek()=='\n'){
            break;
        }
    }
    std::queue<Node*> q;
    q.push(tree.get_root());
    while(!q.empty()){
        if(q.front()->left){
            q.push(q.front()->left);
        }
        if(q.front()->right){
            q.push(q.front()->right);
        }
        std::cout<<q.front()->value<<' ';
        q.pop();
    }
    return 0;
}
